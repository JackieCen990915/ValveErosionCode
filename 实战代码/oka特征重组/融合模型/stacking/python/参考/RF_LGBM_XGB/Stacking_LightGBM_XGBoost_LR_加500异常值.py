from sklearn.datasets import make_blobs
from sklearn import datasets
import numpy as np


from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from lightgbm import LGBMRegressor
from sklearn.ensemble import StackingRegressor

from sklearn.model_selection import train_test_split
from sklearn.datasets import make_moons
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold

from sklearn import metrics

from sklearn.preprocessing import MinMaxScaler 


import pandas as pd




######################1.导入数据######################
df=pd.read_excel('../../../../0114_cx_整理数据_17_最终.xlsx',sheet_name='Sheet1')








######################2.提取特征变量######################
x=df.drop(columns='ROP ')
y=df['ROP ']


print("---------------x------------------")
print(x)
print(type(x))
print("---------------y------------------")
print(y)
print(type(y))






######################3.划分训练集和测试集######################
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=123)


######################3.划分训练集和测试集######################
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=123)


#7378*0.8=5,902.4----5900吧，5900*0.5=2,950
##### 将异常值添加到训练集#####################################
##### 将异常值添加到前半部分的训练集---0，2949
random_numbers1=[1,2,1270,1017,2084,2567,921,621,70,2150,2081,1332,1432,835,709,2484,373,19,1093,1569,2893,1379,1030,776,668,2827,980,2466,1082,1303,922,2361,692,1629,2936,2057,2055,2572,1771,208,1469,2434,2395,2414,1227,2521,41,2514,2292,2247,2799,839,190,1502,1350,2832,945,572,2396,1399,2943,1669,2557,1583,2092,2913,150,270,1027,1212,1394,710,1288,2340,2393,2157,1851,924,1916,12,512,1311,1097,2164,1100,503,2010,1144,1437,2262,1873,1995,2184,2534,1183,2692,1995,2714,2917,1955,1920,1958,1810,712,2696,672,751,529,2861,1851,2061,1774,1828,378,1134,1402,1767,1226,1501,915,2146,2291,2790,2306,1062,282,1051,291,2138,1677,862,1134,171,898,214,90,624,944,1808,2378,247,442,1107,1987,1403,279,2813,2541,1847,1328,1449,2925,77,2052,2289,1428,2444,2466,1229,1700,2195,349,1228,682,1307,2531,1739,641,1124,15,564,1305,1606,1616,1302,615,2554,1058,1974,200,1532,779,1663,1038,512,19,804,1869,989,2708,273,2890,1272,822,1300,1089,144,181,1215,1547,14,1857,1755,661,660,782,2481,2332,1258,548,1923,1667,2759,843,619,208,211,1218,17,2788,2165,885,2698,70,2247,903,1357,2440,512,1258,29,2445,70,1603,87,1895,2807,298,840,1781,2363,2546,2010,1767,2574,1269,217,2007,2702,1770,246,1531,1288,1387,1484,1129,1097,567,358,964,2379,2446,1301,2243,721,442,1104,2153,689,2036,891,2833,579,1856,2585,942,34]
#print("前半部分未加噪声：",y_train[random_numbers1])
#随机倍数----相对误差大于25%。
# 生成形状为 (272, 1) 的[0, 0.7)范围内的随机浮点数数组
random_numbers2=[0.98769834, 0.78636763, 0.60650071, 0.02707217, 0.53179517, 0.51960124, 0.43025595, 0.49257521, 0.57928554, 0.36120821, 0.0902041 , 0.13231758, 0.55573971, 0.44326783, 0.01736305, 0.63734747, 0.65323861, 0.3897228 , 0.65264723, 0.54508286, 0.13825457, 0.31657077, 0.32039987, 0.51607491, 0.39495802, 0.52853966, 0.25738912, 0.68956021, 0.25834211, 0.55889814, 0.07458332, 0.64078404, 0.59930372, 0.34805678, 0.27472365, 0.00521642, 0.02116984, 0.22796516, 0.16216493, 0.22348538, 0.36519939, 0.16850926, 0.49500814, 0.30315888, 0.00790282, 0.15953232, 0.09113956, 0.46481424, 0.41822831, 0.07082455, 0.16766897, 0.39956249, 0.29048941, 0.13754753, 0.46804062, 0.65553741, 0.57675641, 0.65533787, 0.68218228, 0.32310734, 0.6103148 , 0.12130624, 0.13292495, 0.42209281, 0.39561666, 0.34234248, 0.37284218, 0.06693805, 0.08505666, 0.61440806, 0.35340669, 0.49511816, 0.11627217, 0.0176837 , 0.50704301, 0.5123251 , 0.18914595, 0.66819787, 0.31899268, 0.50585032, 0.68853949, 0.4585311 , 0.31247787, 0.37706759, 0.13616216, 0.21583424, 0.61104789, 0.36556357, 0.36238308, 0.33074472, 0.03701076, 0.47492865, 0.15853215, 0.44953447, 0.28235032, 0.34856404, 0.28415163, 0.09166428, 0.28661766, 0.16695059, 0.50097187, 0.64374891, 0.07532671, 0.27617605, 0.09129533, 0.48580765, 0.23085635, 0.24783854, 0.54629486, 0.52084215, 0.57758771, 0.07219144, 0.40644154, 0.01858697, 0.5105799 , 0.19339983, 0.65792934, 0.45966559, 0.6958958 , 0.21948338, 0.55338595, 0.6243622 , 0.03922119, 0.32910063, 0.45987629, 0.38548245, 0.5851861 , 0.57127901, 0.10702466, 0.08430833, 0.36239776, 0.2351664 , 0.54637156, 0.00273453, 0.46002438, 0.07623872, 0.21105313, 0.2293905 , 0.45085824, 0.56423198, 0.47189317, 0.63693475, 0.29061771, 0.24219631, 0.56800458, 0.0219252 , 0.40726901, 0.54313239, 0.62427332, 0.45946758, 0.5638746 , 0.47910223, 0.14952669, 0.13340578, 0.27596052, 0.54061405, 0.3476337 , 0.3752883 , 0.58007839, 0.22076012, 0.3764286 , 0.28287825, 0.27302333, 0.66725043, 0.28198482, 0.21833135, 0.66044657, 0.61774939, 0.20316219, 0.22040564, 0.08133366, 0.00498351, 0.35184557, 0.00365671, 0.0429198 , 0.44236349, 0.23646193, 0.3520177 , 0.27657431, 0.37832503, 0.3016941 , 0.20300638, 0.64493748, 0.5009687 , 0.27816143, 0.43814791, 0.27605402, 0.11160585, 0.69688096, 0.58661452, 0.29206191, 0.34417912, 0.68759175, 0.06015098, 0.34028566, 0.08376192, 0.05313282, 0.1360267 , 0.42886352, 0.28691412, 0.59691485, 0.2829274 , 0.28639757, 0.19436294, 0.51393646, 0.20823995, 0.03068926, 0.19193054, 0.64850154, 0.29846472, 0.31995556, 0.20953405, 0.5606966 , 0.37849613, 0.59756751, 0.08706218, 0.57665398, 0.38908464, 0.50954296, 0.6966508 , 0.50254307, 0.10289169, 0.61864009, 0.16942152, 0.37073167, 0.14924525, 0.34016078, 0.59811729, 0.41640596, 0.58120718, 0.68744579, 0.45462405, 0.49901976, 0.38612244, 0.22573166, 0.15608352, 0.22362077, 0.5273381 , 0.02672154, 0.1484423 , 0.08956092, 0.52015675, 0.23831257, 0.37586648, 0.66343232, 0.49777506, 0.64182169, 0.33424689, 0.26936921, 0.28976906, 0.36964762, 0.43064792, 0.09771016, 0.58499023, 0.47812157, 0.58449193, 0.12073031, 0.55881853, 0.66896319, 0.05353452, 0.68245482, 0.31207958, 0.66654959, 0.64448537, 0.60652446, 0.13798288, 0.4489062 , 0.55659062, 0.42570907, 0.59038404, 0.63362994, 0.20522486, 0.28058752, 0.24074398, 0.63696107, 0.25501987, 0.25743283]
y_train[random_numbers1]=random_numbers2*y_train[random_numbers1] 
#print("前半部分加噪声：",y_train[random_numbers1])




##### 将异常值添加到后半部分的训练集---2950，5900
random_numbers1=[3950,4366,3838,5210,3734,5171,5060,5883,4865,5882,5869,5628,4290,5070,3083,4463,5529,3778,5248,5271,4308,4722,4599,5641,3189,3933,5829,3794,3620,3023,3353,3394,3382,5834,5661,4647,5402,3824,5750,5790,4455,4505,5238,4069,5508,4174,3681,3515,3093,5099,2958,4962,5392,5398,4479,5199,4397,3475,5367,5001,5741,3375,3088,4032,4882,4821,4692,3685,3126,3841,5035,3165,3052,5815,3360,5734,3325,4765,4145,5642,4776,3823,4743,4210,5837,4232,5565,5020,4644,5633,5256,4889,3939,4827,5453,3993,4286,4306,5732,4327,5007,3773,3690,5644,3061,4945,3888,5851,5099,5607,3467,5269,3136,3018,3798,4982,3519,4785,3112,3588,3093,5207,5777,3263,4162,5764,5644,5103,4776,4763,5521,4595,2986,3785,3914,3067,3805,4438,4075,4190,4268,3099,3323,4324,4454,5349,5371,5866,4106,5552,5001,3839,5499,5670,3060,5706,4220,5442,4856,3088,4676,5348,4152,3190,3855,2978,5143,5463,4677,3992,3540,4746,3111,5638,4032,4459,4495,3997,3014,3219,5472,3595,3173,5579,5530,4463,4160,3193,4439,4797,4410,3584,3702,2984,4240,3689,3108,4314,4628,4851,5465,3669,3727,4814,5677,4002,3967,4389,3367,4101,3902,3350,3083,3787,3193,3258,4634,3600,4019,4173,3716,4396,5032,4788,5378,3453,4235,4647]
#print("后半部分未加噪声：",y_train[random_numbers1])
#随机倍数----相对误差大于25%。
# 生成形状为 (228, 1) 的[0, 0.7)范围内的随机浮点数数组
random_numbers2= [ 1.51350989, 1.43924496, 1.50785543, 1.79289648, 1.32577658, 1.88132383, 1.63995265, 1.39671203, 1.99207183, 1.78398893, 1.68301625, 1.74410734, 1.90165225, 1.3705789 , 1.52390127, 1.44868025, 1.4256732 , 1.98377298, 1.77836424, 1.9993651 , 1.94573761, 1.4127702 , 1.97464585, 1.51617246, 1.79086271, 1.61096982, 1.75334984, 1.62845059, 1.34826401, 1.96745389, 1.67851435, 1.45260224, 1.56450912, 1.72580883, 1.84102404, 1.30072696, 1.57857732, 1.9364072 , 1.91367699, 1.77973842, 1.33395868, 1.63971072, 1.8134047 , 1.4090223 , 1.43182303, 1.82109219, 1.76251541, 1.44216055, 1.6125434 , 1.78379762, 1.45911788, 1.63444368, 1.73814383, 1.44577424, 1.68595809, 1.82320227, 1.68868793, 1.39548706, 1.81671717, 1.85915311, 1.36019739, 1.60976885, 1.88080447, 1.76915573, 1.51998448, 1.66073661, 1.39409528, 1.51455396, 1.38450419, 1.76160689, 1.81690531, 1.63334656, 1.85249227, 1.78547578, 1.90450546, 1.50787387, 1.96476064, 1.53783075, 1.7495428 , 1.47548877, 1.85104517, 1.4645885 , 1.83073623, 1.74825601, 1.40818783, 1.74229656, 1.37678077, 1.71177553, 1.75859595, 1.7609521 , 1.40245238, 1.99743921, 1.99076709, 1.63146371, 1.50151352, 1.70096326, 1.50582702, 1.53353981, 1.99090319, 1.59093823, 1.65994145, 1.82338063, 1.76602359, 1.78522859, 1.35843216, 1.71288885, 1.92384467, 1.4741506 , 1.49848876, 1.39391826, 1.51043391, 1.98559013, 1.46137572, 1.68959037, 1.64455616, 1.58522215, 1.46371857, 1.81467571, 1.88076064, 1.7512104 , 1.35384929, 1.98765822, 1.66959929, 1.77050606, 1.80808993, 1.44865546, 1.64260904, 1.3388618 , 1.37842524, 1.59177431, 1.82301479, 1.7558785 , 1.73236268, 1.8807774 , 1.74793657, 1.58776635, 1.73859116, 1.38072794, 1.98140713, 1.37655816, 1.64979025, 1.83636352, 1.95045321, 1.63975594, 1.80135219, 1.41858972, 1.83662747, 1.85180148, 1.68554386, 1.75629917, 1.95431493, 1.59613174, 1.86028138, 1.75498948, 1.99917973, 1.55631169, 1.62278518, 1.46229252, 1.6217385 , 1.64394409, 1.4548752 , 1.93585559, 1.98453474, 1.93376602, 1.83443676, 1.84991975, 1.95075516, 1.4918816 , 1.70418637, 1.78280969, 1.76633115, 1.32757086, 1.8650841 , 1.76238862, 1.44247587, 1.45657194, 1.62846556, 1.80757273, 1.98560973, 1.34714407, 1.83612744, 1.67496349, 1.40223992, 1.5421093 , 1.78686405, 1.65364691, 1.38107973, 1.85776349, 1.61854925, 1.30842964, 1.4880365 , 1.57207155, 1.6215919 , 1.93562333, 1.56104591, 1.84106942, 1.71752031, 1.86213108, 1.94975049, 1.81172995, 1.69288353, 1.83573642, 1.53291883, 1.57050409, 1.8533868 , 1.40618689, 1.94829694, 1.81623776, 1.58953638, 1.77953812, 1.36005302, 1.31929714, 1.36059954, 1.60637366, 1.51549   , 1.53635907, 1.31000773, 1.84442958, 1.43096203, 1.6467071 , 1.83515166, 1.84947841, 1.8437436 , 1.46802665, 1.98139352, 1.88883128, 1.50493733, 1.86633857]
y_train[random_numbers1]=random_numbers2*y_train[random_numbers1] 
#print("后半部分未加噪声：",y_train[random_numbers1])




# 使用MinMaxScaler进行归一化,对结果没影响------------------
scaler=MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

 
 

'''
clf1=RandomForestRegressor(n_estimators=181,
                           max_depth=20,
                           max_features=4,
                           min_samples_leaf=1,
                           min_samples_split=2,
                           random_state=90)
'''

clf2=LGBMRegressor(n_estimators=201,
                   max_depth=18,
                   num_leaves=91,
                   min_data_in_leaf=1,
                   max_bin=90,
                   feature_fraction=0.5,
                   bagging_fraction=0.1,
                   bagging_freq=0,
                   reg_alpha=0.25,
                   reg_lambda=0.0,
                   min_split_gain=0,  
                   random_state=90)

clf3=xgb.XGBRegressor(
                  learning_rate=0.1,
                  max_depth=18,
                  min_child_weight=5,
                  gamma=0,
                  subsample=0.6,
                  colsample_bytree=0.25,
                  alpha=0,
                  reg_lambda=0.1,
                  random_state=90)

# 软投票
estimators=[ ( 'lgbm',clf2),( 'xgb',clf3)]
final_estimator=LinearRegression()

eclf=StackingRegressor(estimators=estimators,
                       final_estimator=final_estimator)



eclf.fit(x_train,y_train)
y_pred = eclf.predict(x_test)




######################6.评估模型######################

MAE=metrics.mean_absolute_error(y_test, y_pred)
MSE=metrics.mean_squared_error(y_test, y_pred)
RMSE=np.sqrt(MSE)
MAPE=metrics.mean_absolute_percentage_error(y_test, y_pred)
R2=metrics.r2_score(y_test, y_pred)




print('MAE:', MAE)
print('MSE:', MSE)
print('RMSE:', RMSE)
print('MAPE:', MAPE)
print('r2_score:', R2)


'''
MAE: 1.3985088636719727
MSE: 5.572221351898176
RMSE: 2.3605553058333912
MAPE: 0.060762477322521755
r2_score: 0.9258826962553592
'''
