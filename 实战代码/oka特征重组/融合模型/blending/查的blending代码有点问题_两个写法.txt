'''
https://wenku.csdn.net/answer/f60f7c305bf246c79c26c1c4ac8bfbac?utm_medium=distribute.pc_relevant_chatgpt_v2.none-task-chatgpt-2~default~OPENSEARCH~Position-4-f60f7c305bf246c79c26c1c4ac8bfbac-chatgpt-6ijgs43i3x.315%5Ev3%5Econtrol&depth_1-utm_source=distribute.pc_relevant_chatgpt_v2.none-task-chatgpt-2~default~OPENSEARCH~Position-4-f60f7c305bf246c79c26c1c4ac8bfbac-chatgpt-6ijgs43i3x.315%5Ev3%5Econtrol&dest=https%3A%2F%2Fwenku.csdn.net%2Fanswer%2Ff60f7c305bf246c79c26c1c4ac8bfbac&spm=1003.2020.3001.6616.4
'''

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# 加载数据
X, y = load_data()

# 划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# 定义基础模型
model1 = RandomForestClassifier(random_state=0)
model2 = KNeighborsClassifier()

# 训练基础模型
model1.fit(X_train, y_train)
model2.fit(X_train, y_train)

# 在测试集上进行预测
pred1 = model1.predict(X_test)
pred2 = model2.predict(X_test)

# 定义元模型
meta_model = LogisticRegression()

# 将基础模型的预测结果作为输入，训练元模型
X_blend = np.column_stack((pred1, pred2))
meta_model.fit(X_blend, y_test)

# 使用元模型进行预测
blend_pred = meta_model.predict(X_blend)

# 计算准确率
accuracy = accuracy_score(y_test, blend_pred)
print("Accuracy:", accuracy)